{
  "id": "sorting_music",
  "label": "Starter Social Model",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body

# PROGRAM INIT

// 🔎 WHAT DOES THIS MODEL DO?
// 🔎 This starter model is inteded to help users explore how people interacting with each other
// 🔎 might impact the other people. The existing code mirrors a basic disease spread scenario for 
// 🔎 some sample code to muck with
// 🔎 Change this description once you are ready to share the model so others know how it is supposed to work.

prop global.visible setTo false

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Song",
      "scriptText": `# BLUEPRINT Song
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


# PROGRAM INIT
// add the features we are likely to use
addFeature Costume
addFeature Population
// 📖 a number that indicate the rank of the songs ( can change based on year, number of listening etc. If alphabetically please use the relevant number that is in reference to the first letter (1=a, z=26)
addProp sort_by number 0
// 📖 A variable to save the value to sort by of the other Song temporarly
addProp compare_sort_by number 0
// 📖 check_order is set to true if the player is interacting with the ranking_chart
addProp check_order boolean false
// 📖 Checking that we are comparing with maximum 1 agent at a time
addProp has_partner number 0

// set the costume
featProp Song.Costume.costumeName setTo 'SM_die_with_a_smile.png'
featProp Song.Costume.scale setTo 0.3

// add other features
addFeature Graphing
addFeature Physics
addFeature Touches

// make sure we track interactions with the NPC
featCall Song.Touches monitor 'Song' b2b
featCall Song.Touches monitor 'RankChart' b2b

// add any properties specific to the PC

// 📖 role is intended to capture the song name. Each agent is going to have a different role and accordingly a different sort_by value and a different costume
addProp role string 'song_name'

// display the meter if relevant
// featCall agent.Graphing bindMeterTo energy

# PROGRAM UPDATE
// This is stuff that happens at particular events such as Start (when the start button is pushed) or Tick (every second or so)
// This is also where you can handle touches between characters such as When Algae touches Fish

when Song touches Song [[
  // glow to show we are interacting
  featProp Song.Costume.glow setTo 1

  // check if the NPC has the virus (or whatever else)
  ifExpr {{ NPC.getProp('virus').value == true }} [[
    // we are in contact with the virus, so we have it now too
  ]]
]]

// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time

every 1 runAtStart [[
  // insert code here to run all the time
  ifExpr {{ agent.getProp('virus').value == true }} [[
    featProp agent.Graphing.text setTo '🤢'
  ]]

  ifExpr {{ agent.getProp('virus').value == false }} [[
    featProp agent.Graphing.text setTo '🙂'
  ]]

]]`
    },
    {
      "name": "RankChart",
      "scriptText": `# BLUEPRINT RankChart
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body

# PROGRAM INIT
// setup the NPC costume
addFeature Costume
featProp RankChart.Costume.costumeName setTo 'SM_ranking_chart.png'
featProp RankChart.Costume.scale setTo 1

// add other features
addFeature Graphing
addFeature Physics
addFeature Touches

// add any properties specific to the PC / NPC
// role is intended to capture the idea that people can have different jobs, or relationships, and that this might influence how they interact with each other
// it's helpful to list roles here for other users to see
// roles for this template are one, and two (they don't mean anything)
addProp role string 'one'

// virus is intended to capture the idea that people might have something (true or false) that they pass to each other ... it could be a virus, information, or something else ... to model something like money you'd want to change to a number or String
addProp virus boolean false
// display the meter if relevant
// featCall agent.Graphing bindMeterTo energy


# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
// This is also where you can handle touches between characters such as When Algae touches Fish
every 1 runAtStart [[
  // insert code here to run all the time
  ifProp RankChart.virus equal true [[
    featProp agent.Graphing.text setTo '🤢'
  ]]

  ifProp RankChart.virus equal false [[
    featProp agent.Graphing.text setTo '🙂'
  ]]

]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Background.Costume.costumeName setTo 'SM_background.png'
featProp Background.Costume.scale setTo 1.4

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Background0",
      "bpid": "Background",
      "initScript": `prop Background.x setTo 29
prop Background.y setTo 30`
    },
    {
      "id": "1",
      "label": "RankChart1",
      "bpid": "RankChart",
      "initScript": `prop RankChart.x setTo 361.48
prop RankChart.y setTo -13.44`
    },
    {
      "id": "2",
      "label": "Song2",
      "bpid": "Song",
      "initScript": `prop Song.x setTo -278.73
prop Song.y setTo -240.23`
    }
  ]
}