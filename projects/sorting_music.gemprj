{
  "id": "sorting_music",
  "label": "sorting_music",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// üîé WHAT DOES THIS MODEL DO?
// üîé This starter model is inteded to help users explore how people interacting with each other
// üîé might impact the other people. The existing code mirrors a basic disease spread scenario for
// üîé some sample code to muck with
// üîé Change this description once you are ready to share the model so others know how it is supposed to work.

prop global.visible setTo false
addFeature Population
addFeature IU
addFeature Graphing
addProp song_name string ''
addProp stack_counter number 1
addProp num_players number 0
addProp countReady number 0
addProp test_sorting boolean false
addProp count_num_comparisons number 0
addProp index_sort_by number 5
addProp sort_by string 'plays'

featProp global.IU.joyceArray add 'Song Attributes'

featProp global.IU.joyceArray add 'SM_APT.png'
featProp global.IU.joyceArray add 'APT'
featProp global.IU.joyceArray add 'Ros√© and Bruno Mars'
featProp global.IU.joyceArray add 2024
featProp global.IU.joyceArray add 15

featProp global.IU.joyceArray add 'SM_die_with_a_smile.png'
featProp global.IU.joyceArray add 'Die With a Smile'
featProp global.IU.joyceArray add 'Lady Gaga and Bruno Mars'
featProp global.IU.joyceArray add 2024
featProp global.IU.joyceArray add 22

featProp global.IU.joyceArray add 'SM_thats_so_true.png'
featProp global.IU.joyceArray add 'Thats So True'
featProp global.IU.joyceArray add 'Gracie Abrams'
featProp global.IU.joyceArray add 2024
featProp global.IU.joyceArray add 37

featProp global.IU.joyceArray add 'SM_birds_of_a_feather.png'
featProp global.IU.joyceArray add 'Birds of a Feather'
featProp global.IU.joyceArray add 'Billie Eilish'
featProp global.IU.joyceArray add 2024
featProp global.IU.joyceArray add 150

featProp global.IU.joyceArray add 'SM_DtMF.png'
featProp global.IU.joyceArray add 'DtMF'
featProp global.IU.joyceArray add 'Bad Bunny'
featProp global.IU.joyceArray add 2025
featProp global.IU.joyceArray add 45

featProp global.IU.joyceArray add 'SM_luther.png'
featProp global.IU.joyceArray add 'Luther'
featProp global.IU.joyceArray add 'Kendrick Lamar and SZA'
featProp global.IU.joyceArray add 2024
featProp global.IU.joyceArray add 28
 
//featProp global.IU.joyceArray add 'SM_Messy.png'
//featProp global.IU.joyceArray add 'Messy'
//featProp global.IU.joyceArray add 'Lola Young'
//featProp global.IU.joyceArray add 2024
//featProp global.IU.joyceArray add 5

//featProp global.IU.joyceArray add 'SM_who.png'
//featProp global.IU.joyceArray add 'Who'
//featProp global.IU.joyceArray add 'Jimin'
//featProp global.IU.joyceArray add 2024
//featProp global.IU.joyceArray add 200

featProp global.IU.joyceArray print

// required directive
# PROGRAM UPDATE

ifExpr {{ global.getProp('num_players').value!=0 && global.getProp('countReady').value == global.getProp('num_players').value }} [[
  prop global.test_sorting setTo true
]]

ifExpr {{ global.getProp('num_players').value!=0 && global.getProp('countReady').value != global.getProp('num_players').value }} [[
  
  prop global.test_sorting setTo false
]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Background.Costume.costumeName setTo 'SM_background.png'
featProp Background.Costume.scale setTo 0.82

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    },
    {
      "name": "song",
      "scriptText": `# BLUEPRINT song
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body


# PROGRAM INIT
// add the features we are likely to use
addFeature Costume
addFeature Population

// set the costume
featProp song.Costume.costumeName setTo 'SM_APT.png'
featProp song.Costume.scale setTo 0.35

// add other features
addFeature Graphing
addFeature Physics
addFeature Touches

// make sure we track interactions with the NPC
featCall song.Touches monitor 'song' c2c
featCall song.Touches monitor 'rankChart' b2b

// add any properties specific to the PC

// ‚úèÔ∏è Intended to capture the song name. Each agent is going to have a different song_name and accordingly a different sort_by value and a different costume
addProp song_name string 'teste'
addProp artists string 'joyce'
addProp year number 2012
addProp plays number 1
// ‚úèÔ∏è a number that indicate the rank of the songs ( can change based on year, number of listening etc. If alphabetically please use the relevant number that is in reference to the first letter (1=a, z=26)
addProp sort_by_value number 0
addProp sort_by_value_string string 'none'
// ‚úèÔ∏è A variable to save the value to sort by of the other song temporarly
addProp value_to_compare number -100
addProp value_to_compare_string string 'none'
// ‚úèÔ∏è saves a temp value of the song name I am comparing with
addProp compare_to_song_name string
// ‚úèÔ∏è check_order is set to true if the player is interacting with the ranking_chart
addProp check_order boolean false
// ‚úèÔ∏è Checking that we are comparing with maximum 1 agent at a time
addProp has_partner number 0
// ‚úèÔ∏è boolean used to ensure song arent counted as more than one player on init
addProp player boolean false
// ‚úèÔ∏è saves for the record what kind of attribute are we sorting by
addProp sort_by_attribute string
addProp position_in_rank number 0
addProp correct_position boolean false

# PROGRAM UPDATE

onEvent START [[
ifExpr {{song.getProp('song_name').value === 'teste'}} [[
  ifExpr {{ global.getProp('stack_counter').value < global.getFeatProp('IU', 'joyceArray').size() }} [[
      exprPush {{ global.getFeatProp('IU', 'joyceArray').get(global.getProp('stack_counter').value) }}
      featPropPop song.Costume.costumeName
      prop global.stack_counter add 1
      exprPush {{ global.getFeatProp('IU', 'joyceArray').get(global.getProp('stack_counter').value) }}
      propPop song.song_name
      prop global.stack_counter add 1
      exprPush {{ global.getFeatProp('IU', 'joyceArray').get(global.getProp('stack_counter').value) }}
      propPop song.artists
      prop global.stack_counter add 1
      exprPush {{ global.getFeatProp('IU', 'joyceArray').get(global.getProp('stack_counter').value) }}
      propPop song.year
      prop global.stack_counter add 1
      exprPush {{ global.getFeatProp('IU', 'joyceArray').get(global.getProp('stack_counter').value) }}
      propPop song.plays
      prop global.stack_counter add 1
    ]]
    ifExpr {{global.getProp('sort_by').value === 'plays'}} [[
    \tpropPush plays
    \tpropPop sort_by_value 
    ]]
    ifExpr {{global.getProp('sort_by').value === 'year'}} [[
    \tpropPush year
    \tpropPop sort_by_value 
    ]]
    ifExpr {{global.getProp('sort_by').value === 'name'}} [[
    \tpropPush song_name
    \tpropPop sort_by_value_string
    ]]
    ifExpr {{global.getProp('sort_by').value === 'artists'}} [[
    \tpropPush artists
    \tpropPop sort_by_value_string
    ]]
]]
]]

onEvent ROUNDINIT [[
  ifProp song.player equal false [[
    prop global.num_players add 1
    dbgOut {{ 'num of active players: ' + global.getProp('num_players').value }}
    prop song.player setTo true
    
  ]]
]]

when song touches song [[
  ifProp song.has_partner equal 0 [[
    // push the song_name property of the other agent and put it into a temporary property on the song
    propPush character.song_name
    propPop song.compare_to_song_name
    propPush song.song_name
    propPop character.compare_to_song_name
    // compare a temporary property with the song_name property of the other song I am comparing with to check if the other agent is myself
    ifExpr {{ song.getProp('song_name').value != song.getProp('compare_to_song_name').value }} [[
      // if the other agent is not me, check if the other agent has a partner and if it is carrying finch properties.
      ifProp character.has_partner equal 0 [[
        // set the song and agent as having a partner
        prop song.has_partner setTo 1
        prop character.has_partner setTo 1
        dbgOut {{ 'Comparing by '+global.getProp('sort_by').value }} 
        ifExpr {{ song.getProp('sort_by_value_string').value === 'none' }} [[
          dbgOut 'comparing numeric'
          // push the sort by value property of the agent and put it in a temporary beak length property of the song and vise versa
          propPush character.sort_by_value
          dbgStack
          propPop song.value_to_compare
          //dbgOut {{ 'added a value to compare to song: ' + song.getProp('song_name').value + ' and set the following value: ' + song.getProp('value_to_compare').value }}
          propPush song.sort_by_value
          dbgStack
          propPop character.value_to_compare
          //dbgOut {{ 'added a value to compare to song: ' + character.getProp('song_name').value + ' and set the following value: ' + character.getProp('value_to_compare').value }}
          // making sure value to compare updates correctly
          ifExpr {{ song.getProp('value_to_compare').value != -100 && character.getProp('value_to_compare').value != -100 }} [[
            // compare the sort by value and temporary (compared to) sort by value properties of the song. If song is larger, change the song costume to larger and the agent costume to smaller
            ifExpr {{ song.getProp('sort_by_value').value > song.getProp('value_to_compare').value }} [[
              dbgOut {{ 'String comparison => '+ song.getProp('sort_by_value').value +' > ' + song.getProp('value_to_compare').value}}
              featProp song.Costume.scale setTo 0.55
              featProp character.Costume.scale setTo 0.25
              featProp song.Costume.glow setTo 1
              featProp character.Costume.glow setTo 1
              // Count and log the number of comparisons between songs
              prop global.count_num_comparisons add 1
              //dbgOut {{ 'num of comparisons so far: ' + global.getProp('count_num_comparisons').value }}
              //dbgOut {{ 'Comaprison event between ' + song.getProp('song_name').value + ' and ' + character.getProp('song_name').valu + ' with results: ' + song.getProp('song_name').value + ' is bigger ' }}
            ]]
            ifExpr {{ song.getProp('sort_by_value').value < song.getProp('value_to_compare').value }} [[
              dbgOut {{ 'String comparison => '+ song.getProp('sort_by_value').value +' < ' + song.getProp('value_to_compare').value}}
              featProp song.Costume.scale setTo 0.25
              featProp character.Costume.scale setTo 0.55
              featProp song.Costume.glow setTo 1
              featProp character.Costume.glow setTo 1
              // Count and log the number of comparisons between songs
              prop global.count_num_comparisons add 1
              //dbgOut {{ 'num of comparisons so far: ' + global.getProp('count_num_comparisons').value }}
              //dbgOut {{ 'Comaprison event between ' + song.getProp('song_name').value + ' and ' + character.getProp('song_name').valu + ' with results: ' + song.getProp('song_name').value + ' is smaller ' }}

            ]]
            ifExpr {{ song.getProp('sort_by_value').value == song.getProp('value_to_compare').value }} [[
              dbgOut {{ 'String comparison => '+ song.getProp('sort_by_value').value +' = ' + song.getProp('value_to_compare').value}}
              featProp song.Costume.scale setTo 0.4
              featProp character.Costume.scale setTo 0.4
              featProp song.Costume.glow setTo 1
              featProp character.Costume.glow setTo 1
              // Count and log the number of comparisons between songs
              prop global.count_num_comparisons add 1
              //dbgOut {{ 'num of comparisons so far: ' + global.getProp('count_num_comparisons').value }}
              //dbgOut {{ 'Comaprison event between ' + song.getProp('song_name').value + ' and ' + character.getProp('song_name').valu + ' with results: equal ' }}
            ]]
          ]]

        ]]

        ifExpr {{ song.getProp('sort_by_value_string').value != 'none' }} [[
          propPush character.sort_by_value_string
          propPop song.value_to_compare_string
          propPush song.sort_by_value_string
          propPop character.value_to_compare_string
          ifExpr {{ song.getProp('value_to_compare_string').value != 'none' && character.getProp('value_to_compare_string').value != 'none' }} [[
            ifExpr {{ song.getProp('sort_by_value_string').value.localeCompare(song.getProp('value_to_compare_string').value) > 0 }} [[
              dbgOut {{ 'String comparison => '+ song.getProp('sort_by_value_string').value +' > ' + song.getProp('value_to_compare_string').value}}
              featProp song.Costume.scale setTo 0.55
              featProp character.Costume.scale setTo 0.25
              featProp song.Costume.glow setTo 1
              featProp character.Costume.glow setTo 1
              prop global.count_num_comparisons add 1
            ]]
            ifExpr {{ song.getProp('sort_by_value_string').value.localeCompare(song.getProp('value_to_compare_string').value) < 0 }} [[
              dbgOut {{ 'String comparison => '+ song.getProp('sort_by_value_string').value +' < ' + song.getProp('value_to_compare_string').value}}
              featProp song.Costume.scale setTo 0.25
              featProp character.Costume.scale setTo 0.55
              featProp song.Costume.glow setTo 1
              featProp character.Costume.glow setTo 1
              prop global.count_num_comparisons add 1
            ]]
            ifExpr {{ song.getProp('sort_by_value_string').value.localeCompare(song.getProp('value_to_compare_string').value) == 0 }} [[
              dbgOut {{ 'String comparison => '+ song.getProp('sort_by_value_string').value +' = ' + song.getProp('value_to_compare_string').value}}
              featProp song.Costume.scale setTo 0.4
              featProp character.Costume.scale setTo 0.4
              featProp song.Costume.glow setTo 1
              featProp character.Costume.glow setTo 1
              prop global.count_num_comparisons add 1
            ]]
          ]]

        ]]

      ]]
    ]]
  ]]
]]

// change the costume of song after interacting with another song to compare sot by value properties
when song lasttouches song [[
  // resetting values for both songs
  prop song.has_partner setTo 0
  prop character.has_partner setTo 0
  featProp song.Costume.scale setTo 0.4
  featProp character.Costume.scale setTo 0.4
  prop song.value_to_compare setTo 0
  prop character.value_to_compare setTo -100
  prop song.compare_to_song_name setTo
  prop character.compare_to_song_name setTo
  //dbgOut {{ 'end of comparison event between ' + song.getProp('song_name').value + ' and ' + character.getProp('song_name').value }}
]]

// when a song actively interacts with the rank chart, set the player status as ready to make a prediction and add one to the global property to count ready players
when song touches rankChart [[
  ifProp song.check_order equal false [[
    featProp song.Costume.glow setTo 1
    prop song.check_order setTo true
    prop global.countReady add 1
    //dbgOut {{ 'song: ' + song.getProp('song_name').value + ' is on the rank chart with total songs ready to test sorting of: ' + global.getProp('countReady').value }}
  ]]
]]

// when song leave the rank chart, set the player status as not ready to make a prediction and remove their count from the global property to count ready players
when song lasttouches rankChart [[
  ifProp global.countReady greaterThan 0 [[
    prop global.countReady sub 1
  ]]
  prop song.check_order setTo false
  prop song.correct_position setTo false
  prop song.position_in_rank setTo 0
  //dbgOut {{ 'song: ' + song.getProp('song_name').value + ' just left the rank chart with total songs ready to test sorting of: ' + global.getProp('countReady').value }}
]]


// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time

every 1 runAtStart [[
// test sorting
ifProp global.test_sorting equal true [[
  dbgOut {{ 'test of sorting in progress' }}
  prop song.isInert setTo true
  //dbgOut {{ 'for song name: ' + song.getProp('song_name').value + ' Y value is: ' + song.getProp('y').value }}
  ifExpr{{((song.getProp('y').value + 57) > -293) && ((song.getProp('y').value + 57) < -171)}} [[
  \tprop song.position_in_rank setTo 1
  ]]
  ifExpr{{((song.getProp('y').value + 57) > -171) && ((song.getProp('y').value + 57) < -57)}} [[
  \tprop song.position_in_rank setTo 2
  ]]
  ifExpr{{((song.getProp('y').value + 57) > -57) && ((song.getProp('y').value + 57) < 61.5)}} [[
  \tprop song.position_in_rank setTo 3
  ]]
  ifExpr{{((song.getProp('y').value + 57) > 61.5) && ((song.getProp('y').value + 57) < 176)}} [[
  \tprop song.position_in_rank setTo 4
  ]]
  ifExpr{{((song.getProp('y').value + 57) > 176) && ((song.getProp('y').value + 57) < 293)}} [[
  \tprop song.position_in_rank setTo 5
  ]]
  ifExpr{{((song.getProp('y').value + 57) > 293)}} [[
  \tprop song.position_in_rank setTo 6
  ]]
  //dbgOut {{ song.getProp('trackerId').value + ': Y + 57 = ' + (song.getProp('y').value + 57) + ' and position = '+ song.getProp('position_in_rank').value}}
  //dbgOut{{global.getFeatProp('IU', 'joyceArray').size() }}
  //ifExpr{{song.getProp('correct_position').value != true}} [[
    ifExpr{{global.getFeatProp('IU', 'joyceArray').size() > 6}} [[
  \t  exprPush{{ (global.getFeatProp('IU', 'joyceArray').filterByPosition(5, 5).sortNumericDescending().get(song.getProp('position_in_rank').value - 1)) === (song.getProp('sort_by_value').value) }}
      propPop song.correct_position
    ]]
    
    ifExpr{{global.getFeatProp('IU', 'joyceArray').size() <= 6}} [[
  \t  exprPush{{ (global.getFeatProp('IU', 'joyceArray').get(song.getProp('position_in_rank').value - 1)) === (song.getProp('sort_by_value').value) }}
      propPop song.correct_position
    ]]
    ifExpr{{song.getProp('correct_position').value != true}} [[
       dbgOut {{song.getProp('artists').value + ': INCORRECT '}}
       prop song.alpha setTo 0.3
    ]]
    ifExpr{{song.getProp('correct_position').value === true}} [[
    \tdbgOut {{song.getProp('artists').value + ': CORRECT '}}
    \tfeatProp song.Costume.glow setTo 5
    ]]
  //]]  
  //dbgOut {{song.getProp('artists').value + ': at position = '+song.getProp('position_in_rank').value+', correct_position = '+song.getProp('correct_position').value}}
  

]]


]]`
    },
    {
      "name": "rankChart",
      "scriptText": `# BLUEPRINT rankChart
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT
// setup the NPC costume
addFeature Population
addFeature Costume
featProp rankChart.Costume.costumeName setTo 'SM_ranking_chart.png'
featProp rankChart.Costume.scale setTo 0.75

// add other features
addFeature Graphing
addFeature Physics
addFeature Touches

featCall rankChart.Touches monitor 'song' b2b

// add any properties specific to the PC / NPC


# PROGRAM UPDATE


`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// üîé WHAT DOES THIS CHARACTER DO?
// üîé This is a timer character so that we can see how much time has passed in our model
// üîé We can use that time to think about how long the ecosystem survives if we want

# PROGRAM INIT
addFeature Graphing
addFeature Costume

// Hide the actual art since we just want the text to displaay
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'
featProp Timer.Costume.scale setTo 1

// A property to track the time
addProp time number 0

// set the initial label and then update it below during update
exprPush {{ 'Time: ' + Timer.getProp('time').value }}
featPropPop Timer.Graphing.text

# PROGRAM UPDATE
// Every second, add one to the time and then update the text on the timer character to say Time: #
// timer stops when the test_sorting phase begins
every 1 runAtStart [[
  ifProp global.test_sorting equal false [[
    prop Timer.time add 1
    exprPush {{ 'Time: ' + Timer.getProp('time').value }}
    featPropPop Timer.Graphing.text
  ]]
]]`
    },
    {
      "name": "graph_comparisons",
      "scriptText": `# BLUEPRINT graph_comparisons
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
addFeature Population

addProp total_comparisons_count number 0

featProp graph_comparisons.Costume.costumeName setTo 'GEN_onexone.json'
featProp graph_comparisons.Graphing.isLargeGraphic setTo true
featProp graph_comparisons.Graphing.graphProp setTo 'total_comparisons_count'
featProp graph_comparisons.Graphing.graphMinY setTo 0
featProp graph_comparisons.Graphing.graphMaxY setTo 50
//featProp graph_comparisons.Graphing.graphMinX setTo 0
//featProp graph_comparisons.Graphing.graphMaxX setTo 50
featProp graph_comparisons.Graphing.text setTo 'comparisons count'
featProp graph_comparisons.Graphing.meterColor setTo 65280
featProp graph_comparisons.Graphing.wordWrapWidth setTo 150


// what row are we in on the screen (4 total, incremented at end of round)
addProp row number 1

addProp fieldType string ''

# PROGRAM UPDATE
ifExpr {{ global.getProp('count_num_comparisons').value != graph_comparisons.getProp('total_comparisons_count').value }} [[
  ifProp graph_comparisons.row equal 1 [[
    propPush global.count_num_comparisons
    propPop graph_comparisons.total_comparisons_count
  ]]
]]`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Background0",
      "bpid": "Background",
      "initScript": `prop Background.x setTo 4.31
prop Background.y setTo 4.15`
    },
    {
      "id": "1",
      "label": "rankChart1",
      "bpid": "rankChart",
      "initScript": `prop rankChart.x setTo 325.62
prop rankChart.y setTo -4.36`
    },
    {
      "id": "2",
      "label": "song2",
      "bpid": "song",
      "initScript": `prop song.x setTo 304.22
prop song.y setTo 175.94
prop song.sort_by_value setTo 1
prop song.song_name setTo 'teste'
featProp song.Costume.costumeName setTo 'SM_thats_so_true.png'`
    },
    {
      "id": "3",
      "label": "song3",
      "bpid": "song",
      "initScript": `prop song.x setTo 306.9
prop song.y setTo -56.98
prop song.sort_by_value setTo 2
prop song.song_name setTo 'teste'`
    },
    {
      "id": "4",
      "label": "song4",
      "bpid": "song",
      "initScript": `prop song.x setTo 308.73
prop song.y setTo -171.12
prop song.sort_by_value setTo 3
prop song.song_name setTo 'teste'
featProp song.Costume.costumeName setTo 'SM_die_with_a_smile.png'`
    },
    {
      "id": "6",
      "label": "graph_comparisons6",
      "bpid": "graph_comparisons",
      "initScript": `prop graph_comparisons.x setTo -473.16
prop graph_comparisons.y setTo -266.19`
    },
    {
      "id": "7",
      "label": "Timer7",
      "bpid": "Timer",
      "initScript": `prop Timer.x setTo -454.54
prop Timer.y setTo -397.29`
    }
  ]
}